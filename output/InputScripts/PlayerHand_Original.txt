extends Node2D

#const HAND_COUNT = 8

const CARD_WIDTH:int = 110
const HAND_Y_POSITION:int = 700
const DEFAULT_CARD_MOVE_SPEED:float = 0.4
var player_hand:Array = []
var center_screen_x:float

func _ready() -> void:
	center_screen_x = get_viewport().size.x/2


func add_card_to_hand(card,speed) -> void:
	if card not in player_hand:
		player_hand.append(card)
		update_hand_positions(speed)
		card.state_machine.transition_to(card.state_machine.State.IN_HAND)
	else:
		animate_card_to_position(card, card.hand_position,DEFAULT_CARD_MOVE_SPEED)

func update_hand_positions(speed) -> void:
	for i in range(player_hand.size()):
		var new_position:Vector2 = Vector2(calculate_card_position(i), HAND_Y_POSITION)
		var card = player_hand[i]
		card.hand_position = new_position
		animate_card_to_position(card, new_position,speed)

func calculate_card_position(index) -> float:
	var x_offset: float = (player_hand.size() - 1) * CARD_WIDTH
	var x_position: float = (center_screen_x - x_offset / 2) + (index * CARD_WIDTH)
	return x_position

func animate_card_to_position(card, new_position,speed) -> void:
	var tween: Tween = get_tree().create_tween()
	tween.tween_property(card, "position", new_position, speed)

func remove_card_from_hand(card) -> void:
	if card in player_hand:
		player_hand.erase(card)
		update_hand_positions(DEFAULT_CARD_MOVE_SPEED)

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta: float) -> void:
	#pass
